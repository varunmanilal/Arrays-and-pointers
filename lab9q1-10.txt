1.
	*p3 = S
	*p3 = T, p3 = 6940
	*p1 = S, p1 = 6940
2.
	D. *p = 75;
3.
	double pointer is pointing to a char.
4. 
	int main()
	{
	   char blocks[3] = {'A','B','C'}; // 4434
	   char *ptr = &blocks[0]; // 4434	
	   char temp; // random value

	   temp = blocks[0]; // A
	   temp = *(blocks + 2); // C
	   temp = *(ptr + 1); // B
	   temp = *ptr; // A

	   ptr = blocks + 1; // 4435
	   temp = *ptr; // B
	   temp = *(ptr + 1); // C

	   ptr = blocks; //4434
	   temp = *++ptr; // B
	   temp = ++*ptr; // C
	   temp = *ptr++; // B
	   temp = *ptr; // C

	   return 0;
	}
	
	4434,4434,random value, A,C,B,A,4435,B,C,4434,B,C,B,C
5.
	char s[10] = "abcde";
	char* cptr
	// length of char array
	int n;
	for(n =0;*(s+n)!='\0';i++);
	// reversing loop
	for(int i =0;i<n;i++){
		*(cptr+i)=*(s+n-i);
	}
6.	
	int countEven(int* num, int n){
		int ne=0;
		for(int i =0;i<n;i++){
			if(*(num+i)/2==0)
				ne++;	
		}
		return ne;
	}
7. 
	  double* maximum(double* a, int size){
	  	if(size==0)
			return NULL;
		double* max=a;
		for(int i=0; i<size;i++){
			if(*max<*(a+i)){
				max = a+i;
			}
		}
		return max;
		
	  }
8.
	int myStrLen(char* str){
		int i =0;
		// counts char b4 null char	
		while(*(str+i)!='\0'){
			i++;	
		}
		return i;
	}
9.
	bool contains(char *str, char c){
		// length of char array
		int n;
		for(n =0;*(s+n)!='\0';i++);
		for(int i =0;i<n;i++){
			if(*(str+i)==c)
				return true;
		}
		return false;
		
	}
10.
	void revtString(char* ptr){
		int n;
		for(n =0;*(s+n)!='\0';i++);
		for(int i =0; i<n;i++){
			int temp = *(ptr+i)
			*(ptr+i)=(ptr+n-i);
			*(ptr+n-i)=temp;
		}
	  
	}
